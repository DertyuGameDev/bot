# import asyncio
# from datetime import datetime
# import json
# import logging
# import urllib

import requests
# from aiogram import Bot, Dispatcher, types
# from aiogram.filters import Command
# from aiogram.fsm.state import StatesGroup, State
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
# from aiohttp import web
# from config import BOT_TOKEN

# -*- coding: utf-8 -*-
import asyncio
import json
import logging
import urllib
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import ReplyKeyboardRemove
from data.user import UserCard
from config import BOT_TOKEN
from data import db_session
from aiohttp import web

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
# API_URL = 'https://imminent-jet-suggestion.glitch.me'
# API_URL = "https://cultured-ring-dog.glitch.me"
API_URL = "http://127.0.0.1:5000"
routes = web.RouteTableDef()
start_button_for_offline_user = [
    [
        KeyboardButton(text="/start")
    ],
    [
        KeyboardButton(text="–ü–æ–º–æ—â—å")
    ],
    [
        KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    ],
    [
        KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ —Ç–µ–Ω–∏")
    ]
]
start_button_for_online_user = [
    [
        KeyboardButton(text="/start")
    ],
    [
        KeyboardButton(text="–ü–æ–º–æ—â—å")
    ],
    [
        KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    ],
    [
        KeyboardButton(text="–£–π—Ç–∏ –≤ —Ç–µ–Ω—å")
    ]
]
edit_user_buttons = [
    [
        KeyboardButton(text="/age")

    ],
    [
        KeyboardButton(text="/name")
    ],
    [
        KeyboardButton(text="/picture")
    ],
    [
        KeyboardButton(text="/description")
    ],
    [
        KeyboardButton(text="/end_edit_profile")
    ]
]
kb_online = ReplyKeyboardMarkup(keyboard=start_button_for_online_user, resize_keyboard=True, one_time_keyboard=False)
kb_offline = ReplyKeyboardMarkup(keyboard=start_button_for_offline_user, resize_keyboard=True, one_time_keyboard=False)
user_kb = ReplyKeyboardMarkup(keyboard=edit_user_buttons, resize_keyboard=True, one_time_keyboard=False)


@dp.message(Command('start'))
async def start(message: types.Message, state):
    resp = requests.post(f"{API_URL}/check_user", json={"user_id": message.from_user.id})
    data = resp.json()
    if not data["exists"]:
        await ask_birthdate(message, state)
    else:
        await prepare_link(message)


@dp.message(Command("help"))
async def bot_help(message: types.Message):
    data = []
    await message.answer("–≠—Ç–æ –ø–æ–º–æ—â—å")


@dp.message(Command("edit_profile"))
async def edit_user_info(message: types.Message):
    await message.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è", reply_markup=ReplyKeyboardRemove())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=user_kb)


@dp.message(Command("age"))
async def edit_age(message: types.Message, state):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞")
    await state.set_state(WaitNewAge.waiting_message)


class WaitNewAge(StatesGroup):
    waiting_message = State()


@dp.message(WaitNewAge.waiting_message)
async def update_age(message: types.Message, state):
    try:
        age = int(message.text.rstrip())
        if not (6 <= age <= 100):
            raise ValueError
        res = requests.put(f"{API_URL}/edit_user/{message.from_user.id}", json={"old": age}).json()
        await state.clear()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç!")

    except ValueError:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message(Command("name"))
async def edit_name(message: types.Message, state):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è")
    await state.set_state(WaitNewName.waiting_message)


class WaitNewName(StatesGroup):
    waiting_message = State()


@dp.message(WaitNewName.waiting_message)
async def update_name(message: types.Message, state):
    name = message.text.rstrip()
    res = requests.put(f"{API_URL}/edit_user/{message.from_user.id}", json={"name": name}).json()
    await state.clear()
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∏–º—è!")


@dp.message(Command("end_edit_profile"))
async def end_edit_profile(message: types.Message, state):
    await state.clear()
    await message.answer("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=kb_online)


@dp.message(Command("picture"))
async def edit_picture(message: types.Message, state):
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
    await state.set_state(WaitNewPicture.wait_picture)


class WaitNewPicture(StatesGroup):
    wait_picture = State()


@dp.message(WaitNewPicture.wait_picture)
async def update_picture(message: types.Message, state):
    try:
        file_id = message.photo[-1].file_id
        photo = await bot.get_file(file_id)
        file_path = photo.file_path

        file_name = f"static/img/{message.from_user.id}.jpg"
        file = await bot.download_file(file_path)
        res = requests.post(f"{API_URL}/create_picture",
                            files={"file": (file_name, file, "image/jpg")}
                            ).text
        await state.clear()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")
    except TypeError:
        await message.answer("–í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")


@dp.message(Command("description"))
async def edit_description(message: types.Message, state):
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è, —ç—Ç–æ —É–≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.")
    await state.set_state(WaitNewDescription.wait_description)


@dp.message(Command("set_online"))
async def set_online(message: types.Message):
    res = requests.put(f"{API_URL}/edit_user/{message.from_user.id}", json={"disabled": False}).json()
    await message.answer("–û–ø–∏—Å–∞—Ç—å, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ", reply_markup=ReplyKeyboardRemove())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–∞—Å –≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", reply_markup=kb_online)


@dp.message(Command("set_offline"))
async def set_offline(message: types.Message):
    res = requests.put(f"{API_URL}/edit_user/{message.from_user.id}", json={"disabled": True}).json()
    await message.answer("–û–ø–∏—Å–∞—Ç—å, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ", reply_markup=ReplyKeyboardRemove())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–∞—Å –Ω–µ –≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", reply_markup=kb_offline)


class WaitNewDescription(StatesGroup):
    wait_description = State()


@dp.message(WaitNewDescription.wait_description)
async def update_description(message: types.Message, state):
    text = message.text
    res = requests.put(f"{API_URL}/edit_user/{message.from_user.id}", json={"capture": text}).json()
    await state.clear()
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")


async def prepare_link(message, new_user=False):
    payload = {"user_id": message.from_user.id, 'm': message.text}
    json_str = json.dumps(payload)
    encoded = urllib.parse.quote(json_str)
    url = f"{API_URL}/?data={encoded}"
    btns = [
        [
            InlineKeyboardButton(text=u'üöÄ –û—Ç–∫—Ä—ã—Ç—å Web App', url=url)
        ]
    ]
    inline_kb = InlineKeyboardMarkup(inline_keyboard=btns)
    # inline_kb.add(InlineKeyboardButton(text=u'üöÄ –û—Ç–∫—Ä—ã—Ç—å Web App', url=url))
    if new_user:
        await message.answer(
            u"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—à–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=inline_kb
        )
    else:
        await message.answer(u"–ü—Ä–∏–≤–µ—Ç! üëã", reply_markup=kb_online)
        await message.answer(
            u"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—à–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=inline_kb
        )
    # inline_kb = InlineKeyboardMarkup(inline_keyboard=[
    #     [InlineKeyboardButton(text='üöÄ –û—Ç–∫—Ä—ã—Ç—å Web App', web_app=WebAppInfo(url=url))]
    # ])
    # await message.answer(
    #     "–ü—Ä–∏–≤–µ—Ç! üëã\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—à–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
    #     reply_markup=inline_kb
    # )


async def message_like(json):
    user1 = await bot.get_chat(json['user1'])
    user2 = await bot.get_chat(json['user2'])
    await bot.send_message(json['user1'], f'–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å @{user2.username}! –°–∫–æ—Ä–µ–µ –∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—åüòä')
    await bot.send_message(json['user2'], f'–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å @{user1.username}! –°–∫–æ—Ä–µ–µ –∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—åüòä')


class BirthdateForm(StatesGroup):
    waiting_for_birthdate = State()


async def ask_birthdate(message: types.Message, state):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –°–∫–∞–∂–∏ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç.", reply_markup=kb_online)
    await state.set_state(BirthdateForm.waiting_for_birthdate)


@dp.message(BirthdateForm.waiting_for_birthdate)
async def process_birthdate(message: types.Message, state):
    try:
        age = int(message.text.rstrip())
        if 6 > age or age > 100:
            raise ValueError
        await message.answer(f"–°–ø–∞—Å–∏–±–æ! –ü–æ–≥–Ω–∞–ª–∏!")
        picture_path = await get_user_avatar(message)
        requests.post(f"{API_URL}/create_user", json=make_reg(message, age, picture_path))
        await state.clear()
        await prepare_link(message, new_user=True)
    except ValueError:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.")


def make_reg(message, age, picture_path):
    d = {
        'tg_id': message.from_user.id,
        'name': message.from_user.first_name,
        'capture': '-',
        'picture': picture_path,
        'old': age,
        'disabled': 0
    }
    return d


async def get_user_avatar(message):
    user_id = message.from_user.id
    photos = await bot.get_user_profile_photos(user_id)
    print(photos)
    if photos.total_count == 0:
        return 'static/img/default.jpg'
    file_id = photos.photos[0][-1].file_id
    file_info = await bot.get_file(file_id)

    file_path = file_info.file_path
    file_name = f"static/img/{user_id}.jpg"

    file = await bot.download_file(file_path)
    print(requests.post(
        f"{API_URL}/create_picture",
        files={"file": (file_name, file, "image/jpg")}
    ).text)
    return file_name


async def poll_server_for_events():
    while True:
        try:
            response = requests.get(f"{API_URL}/get_events")
            if response.status_code == 200:
                data = response.json()
                for event in data.get("events", []):
                    await message_like(event)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await asyncio.sleep(5)


async def start():
    await asyncio.gather(
        poll_server_for_events(),
        dp.start_polling(bot)
    )

@dp.message()
async def test(message: types.Message):
    print(message.text)
    if message.text == "–ü–æ–º–æ—â—å":
        await bot_help(message)
    elif message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        await edit_user_info(message)
    elif message.text == "–í—ã–π—Ç–∏ –∏–∑ —Ç–µ–Ω–∏":
        await set_online(message)
    elif message.text == "–£–π—Ç–∏ –≤ —Ç–µ–Ω—å":
        await set_offline(message)


if __name__ == "__main__":
    asyncio.run(start())
